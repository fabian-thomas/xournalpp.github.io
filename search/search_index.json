{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"{newline}","title":"Home"},{"location":"community/help/","text":"Getting help and helping out \u00b6 Website documentation and user manual \u00b6 This website is intended to describe Xournal++ and its features reasonably well and complete, so that the average user can find out how Xournal++ works. We are working on completing its content. The website will replace the (rather incomplete) User manual on the Github repository. More technical questions (like how to build Xournal++ from source, or how to check out a pull request) that are relevant for technically more advanced users will still be presented in the Github wiki . Github discussions \u00b6 Our place for discussing all kind of matters related to Xournal++ is Github discussions . This should be helpful for: Asking questions about features Sharing tips and tricks with other members of the community Finding out what other people are using Xournal++ for Getting help with installation or setting up a feature etc. We hope to grow our community knowledge base here. Github issue tracker \u00b6 Use the issue tracker on the Github repository to report bugs and propose enhancements/new features. Please check beforehand if the same bug has already been reported or the same enhancement has already been suggested. If so, use the existing ticket to add additional information or suggest improvements. This will make it easier for us to keep everything under control. Duplicates will usually be closed rapidly, but it always takes time to find them, which the develeopers would prefer to invest in coding and improving the documentation. Issues that are resolved will be closed as well. Open questions are better discussed on Github discussions. Gitter and Matrix channels \u00b6 If you want to discuss some topic related to Xournal++ in chat mode, you may find someone to talk with in the Gitter channel or in the Matrix channel . The Crowdin project \u00b6 Our translations are managed in the Crowdin project . If you would like to contribute, create an account and start contributing. While some languages like English, German and Italian are basically complete, most other languages still need more work. If you are interested in translating a new language, ask the project maintainers on Gitter or create a new issue and they will unlock the language on Crowdin. Github pull requests \u00b6 If you want to contribute to the codebase of Xournal++ you may create a pull request on Github . Once the pull request is ready for review, one of the developer team will review it, suggest changes if necessary or accept/decline the pull request. If you plan some feature, that has not been requested in the issue tracker yet, better open an issue there first, so you know whether your work will be appreciated.","title":"Getting help & helping out"},{"location":"community/help/#getting-help-and-helping-out","text":"","title":"Getting help and helping out"},{"location":"community/help/#website-documentation-and-user-manual","text":"This website is intended to describe Xournal++ and its features reasonably well and complete, so that the average user can find out how Xournal++ works. We are working on completing its content. The website will replace the (rather incomplete) User manual on the Github repository. More technical questions (like how to build Xournal++ from source, or how to check out a pull request) that are relevant for technically more advanced users will still be presented in the Github wiki .","title":"Website documentation and user manual"},{"location":"community/help/#github-discussions","text":"Our place for discussing all kind of matters related to Xournal++ is Github discussions . This should be helpful for: Asking questions about features Sharing tips and tricks with other members of the community Finding out what other people are using Xournal++ for Getting help with installation or setting up a feature etc. We hope to grow our community knowledge base here.","title":"Github discussions"},{"location":"community/help/#github-issue-tracker","text":"Use the issue tracker on the Github repository to report bugs and propose enhancements/new features. Please check beforehand if the same bug has already been reported or the same enhancement has already been suggested. If so, use the existing ticket to add additional information or suggest improvements. This will make it easier for us to keep everything under control. Duplicates will usually be closed rapidly, but it always takes time to find them, which the develeopers would prefer to invest in coding and improving the documentation. Issues that are resolved will be closed as well. Open questions are better discussed on Github discussions.","title":"Github issue tracker"},{"location":"community/help/#gitter-and-matrix-channels","text":"If you want to discuss some topic related to Xournal++ in chat mode, you may find someone to talk with in the Gitter channel or in the Matrix channel .","title":"Gitter and Matrix channels"},{"location":"community/help/#the-crowdin-project","text":"Our translations are managed in the Crowdin project . If you would like to contribute, create an account and start contributing. While some languages like English, German and Italian are basically complete, most other languages still need more work. If you are interested in translating a new language, ask the project maintainers on Gitter or create a new issue and they will unlock the language on Crowdin.","title":"The Crowdin project"},{"location":"community/help/#github-pull-requests","text":"If you want to contribute to the codebase of Xournal++ you may create a pull request on Github . Once the pull request is ready for review, one of the developer team will review it, suggest changes if necessary or accept/decline the pull request. If you plan some feature, that has not been requested in the issue tracker yet, better open an issue there first, so you know whether your work will be appreciated.","title":"Github pull requests"},{"location":"community/other-software/","text":"Relation to other software \u00b6 This section is about the relation between Xournal++ and other open source software products, which either share a decent amount of similarity and compatibility or which can be combined nicely with Xournal++. Xournal \u00b6 Xournal++ started as a C++ rewrite of Xournal by Denis Aroux , which is programmed in C and hosted on sourceforge. Xournal++ is actively developed, while Xournal has stopped developing new features after mid 2016. Denis Aroux notes on the Xournal website : You may also want to try out Xournal++ (which started out as a rewrite of Xournal in C++, but now has evolved well beyond the original, while retaining a decent amount of compatibility). Xournal++ still uses some parts of Xournal's code, most notably Xournal's shape recogntion code. The two applications share a similar look. Xournal++ contains most of Xournal's functionality, while adding some useful pluses. Xournal++ can open Xournal .xoj-documents and export to it in compatibility mode. We are greatly thankful to Denis Aroux for his wonderful software and all of Xournal's contributors. The following lists highlight the differences between the latest development version Xournal++ 1.1.0+dev and Xournal 0.4.8.2016. Features available in Xournal++, but not in Xournal \u00b6 LaTeX tool Audio recording and playback Lua plugins Pen pressure support Sidebar with page and layer previews Page layout in multiple rows/columns Grid and rotation snapping Select object tool Rectangle, Circle, Arrow, Coordinate system and Spline drawing types Flexible remapping of input devices Zoom gestures Drawing modifiers by drawing direction Export to .png and .svg, and various export options Periodic autosave and auto-backup tool Staves and Isodotted page backgrounds More cursor icon options Floating toolbox Configurable toolbars Language selectable in the GUI Option to easily append new pdf pages More distribution options on Linux (PPA, flatpak, appimage and snap packages) Translations in more languages Features available in Xournal, but not in Xournal++ \u00b6 Input via Xinput (which gives better strokes on some devices) One page mode (useful in presentations) A complete documentation and a well documented file format Inlusion in the official Debian repository Known issues/bugs/inconveniences of Xournal, resolved in Xournal++ \u00b6 TODO Performance comparision between Xournal++ and Xournal \u00b6 TODO Xournal++ mobile \u00b6 Xournal++ lacks the option to be used on mobile devices other than Linux phones. Xournal++ mobile tries to fill this gap. It ports the main features of Xournal++ to various Flutter platforms like Android, iOS and the Web. It uses the same .xopp file format as Xournal++ does. The two teams work closely together. Xournal++ Mobile is currently still in early development. Don't expect a fully featured app, but rather a modern looking app to edit basic .xopp -files on the mobile phone or the Web. Strokes, images and LaTeX formulas can be rendered, PDF backgrounds not yet. Stay tuned for more to come. Mr Writer \u00b6 While Xournal++ and Xournal are based on GTK+ 3 and GTK+ 2, respecitively, Mr Writer is a QT-based App which shares a lot of functionality with Xournal and Xournal++. In the author's words: MrWriter is an application aiming to replace both pen and paper for handwritten note taking, as well as blackboards for giving lectures in front of students. It is highly inspired by Xournal / Xournal++ the focus is more on taking notes and platform independence, rather than PDF annotation. Xournal files (.xoj) can be imported, but only strokes get recognized. Mr Writer has its own file format, called .moj which Xournal++ is capable of opening directly. Moreover since Xournal++ can export to .xoj -files you also can basically also open files created by Xournal++ in Mr Writer. Joplin \u00b6 If you are looking for a text based note taking app with great organizational tools, you may want to try out Joplin . While Xournal++ excells in handwriting and PDF annotation, Joplin can organise your notes into notebooks in a nice tree structure and synchronize them via Cloud services like Nextcloud, Dropbox, OneDrive and WebDAV. You can attach all kind of files to a Joplin file, including Xournal++ .xopp -files. Xournal++ and Joplin complement each other pretty well, if you take handwritten notes in class (or elsewhere) and want to keep them nicely organized and synchronized. OBS Studio \u00b6 For creating video recordings or live streams of lectures that you present using Xournal++ we recommend to use OBS Studio . This free and open source tool is available on all major platforms.","title":"Xournal++ & other software"},{"location":"community/other-software/#relation-to-other-software","text":"This section is about the relation between Xournal++ and other open source software products, which either share a decent amount of similarity and compatibility or which can be combined nicely with Xournal++.","title":"Relation to other software"},{"location":"community/other-software/#xournal","text":"Xournal++ started as a C++ rewrite of Xournal by Denis Aroux , which is programmed in C and hosted on sourceforge. Xournal++ is actively developed, while Xournal has stopped developing new features after mid 2016. Denis Aroux notes on the Xournal website : You may also want to try out Xournal++ (which started out as a rewrite of Xournal in C++, but now has evolved well beyond the original, while retaining a decent amount of compatibility). Xournal++ still uses some parts of Xournal's code, most notably Xournal's shape recogntion code. The two applications share a similar look. Xournal++ contains most of Xournal's functionality, while adding some useful pluses. Xournal++ can open Xournal .xoj-documents and export to it in compatibility mode. We are greatly thankful to Denis Aroux for his wonderful software and all of Xournal's contributors. The following lists highlight the differences between the latest development version Xournal++ 1.1.0+dev and Xournal 0.4.8.2016.","title":"Xournal"},{"location":"community/other-software/#features-available-in-xournal-but-not-in-xournal","text":"LaTeX tool Audio recording and playback Lua plugins Pen pressure support Sidebar with page and layer previews Page layout in multiple rows/columns Grid and rotation snapping Select object tool Rectangle, Circle, Arrow, Coordinate system and Spline drawing types Flexible remapping of input devices Zoom gestures Drawing modifiers by drawing direction Export to .png and .svg, and various export options Periodic autosave and auto-backup tool Staves and Isodotted page backgrounds More cursor icon options Floating toolbox Configurable toolbars Language selectable in the GUI Option to easily append new pdf pages More distribution options on Linux (PPA, flatpak, appimage and snap packages) Translations in more languages","title":"Features available in Xournal++, but not in Xournal"},{"location":"community/other-software/#features-available-in-xournal-but-not-in-xournal_1","text":"Input via Xinput (which gives better strokes on some devices) One page mode (useful in presentations) A complete documentation and a well documented file format Inlusion in the official Debian repository","title":"Features available in Xournal, but not in Xournal++"},{"location":"community/other-software/#known-issuesbugsinconveniences-of-xournal-resolved-in-xournal","text":"TODO","title":"Known issues/bugs/inconveniences of Xournal, resolved in Xournal++"},{"location":"community/other-software/#performance-comparision-between-xournal-and-xournal","text":"TODO","title":"Performance comparision between Xournal++ and Xournal"},{"location":"community/other-software/#xournal-mobile","text":"Xournal++ lacks the option to be used on mobile devices other than Linux phones. Xournal++ mobile tries to fill this gap. It ports the main features of Xournal++ to various Flutter platforms like Android, iOS and the Web. It uses the same .xopp file format as Xournal++ does. The two teams work closely together. Xournal++ Mobile is currently still in early development. Don't expect a fully featured app, but rather a modern looking app to edit basic .xopp -files on the mobile phone or the Web. Strokes, images and LaTeX formulas can be rendered, PDF backgrounds not yet. Stay tuned for more to come.","title":"Xournal++ mobile"},{"location":"community/other-software/#mr-writer","text":"While Xournal++ and Xournal are based on GTK+ 3 and GTK+ 2, respecitively, Mr Writer is a QT-based App which shares a lot of functionality with Xournal and Xournal++. In the author's words: MrWriter is an application aiming to replace both pen and paper for handwritten note taking, as well as blackboards for giving lectures in front of students. It is highly inspired by Xournal / Xournal++ the focus is more on taking notes and platform independence, rather than PDF annotation. Xournal files (.xoj) can be imported, but only strokes get recognized. Mr Writer has its own file format, called .moj which Xournal++ is capable of opening directly. Moreover since Xournal++ can export to .xoj -files you also can basically also open files created by Xournal++ in Mr Writer.","title":"Mr Writer"},{"location":"community/other-software/#joplin","text":"If you are looking for a text based note taking app with great organizational tools, you may want to try out Joplin . While Xournal++ excells in handwriting and PDF annotation, Joplin can organise your notes into notebooks in a nice tree structure and synchronize them via Cloud services like Nextcloud, Dropbox, OneDrive and WebDAV. You can attach all kind of files to a Joplin file, including Xournal++ .xopp -files. Xournal++ and Joplin complement each other pretty well, if you take handwritten notes in class (or elsewhere) and want to keep them nicely organized and synchronized.","title":"Joplin"},{"location":"community/other-software/#obs-studio","text":"For creating video recordings or live streams of lectures that you present using Xournal++ we recommend to use OBS Studio . This free and open source tool is available on all major platforms.","title":"OBS Studio"},{"location":"guide/","text":"User Guide \u00b6 TODO","title":"User Guide"},{"location":"guide/#user-guide","text":"TODO","title":"User Guide"},{"location":"guide/config/","text":"Configuration \u00b6 Preferences \u00b6 Xournal ++ has multiple options that can be configured and customized. Most of these features can be found under Edit > Preferences . Load / Save \u00b6 Autosaving \u00b6 Enable or disable automatic saving and set the time interval in which it will be done. If the document was previously saved in any folder, the autosave document will be in the same location as a hidden file. Otherwise the file will be saved in the path ~/.xournalpp/autosave . Default Save Name \u00b6 Name that will be proposed by default when using Save As option. Allows the use of placeholders. Autoloading Journals \u00b6 TODO Input System \u00b6 TODO Mouse \u00b6 In this section you can set the behavior of the middle and right mouse buttons to associate tools with it. Each tool allows sub settings for thickness, color, stroke type, etc. if they are available. Stylus \u00b6 Pressure Sensitivity \u00b6 Enables / disables pressure sensitivity to make thicker strokes when pressing the stylus more heavily. Only effective on tablets that support this feature. Artifact Workaround \u00b6 TODO Stylus Buttons \u00b6 Specifies the behavior of the buttons on the stylus when pressed, allowing them to be associated with tools just like the buttons on the mouse. The Button 1 and Button 2 are typical side buttons. The Eraser is supported only by some styluses and works using the opposite side of the pen tip; precisely like a pencil from real life. These changes are not persistent; in other words, once the stylus button is released, the previously held tool will be selected again. Touchscreen \u00b6 TODO View \u00b6 TODO Zoom \u00b6 TODO Drawing Area \u00b6 TODO Defaults \u00b6 TODO Audio Recording \u00b6 TODO LaTeX \u00b6 TODO Language \u00b6 TODO","title":"Configuration"},{"location":"guide/config/#configuration","text":"","title":"Configuration"},{"location":"guide/config/#preferences","text":"Xournal ++ has multiple options that can be configured and customized. Most of these features can be found under Edit > Preferences .","title":"Preferences"},{"location":"guide/config/#load-save","text":"","title":"Load / Save"},{"location":"guide/config/#autosaving","text":"Enable or disable automatic saving and set the time interval in which it will be done. If the document was previously saved in any folder, the autosave document will be in the same location as a hidden file. Otherwise the file will be saved in the path ~/.xournalpp/autosave .","title":"Autosaving"},{"location":"guide/config/#default-save-name","text":"Name that will be proposed by default when using Save As option. Allows the use of placeholders.","title":"Default Save Name"},{"location":"guide/config/#autoloading-journals","text":"TODO","title":"Autoloading Journals"},{"location":"guide/config/#input-system","text":"TODO","title":"Input System"},{"location":"guide/config/#mouse","text":"In this section you can set the behavior of the middle and right mouse buttons to associate tools with it. Each tool allows sub settings for thickness, color, stroke type, etc. if they are available.","title":"Mouse"},{"location":"guide/config/#stylus","text":"","title":"Stylus"},{"location":"guide/config/#pressure-sensitivity","text":"Enables / disables pressure sensitivity to make thicker strokes when pressing the stylus more heavily. Only effective on tablets that support this feature.","title":"Pressure Sensitivity"},{"location":"guide/config/#artifact-workaround","text":"TODO","title":"Artifact Workaround"},{"location":"guide/config/#stylus-buttons","text":"Specifies the behavior of the buttons on the stylus when pressed, allowing them to be associated with tools just like the buttons on the mouse. The Button 1 and Button 2 are typical side buttons. The Eraser is supported only by some styluses and works using the opposite side of the pen tip; precisely like a pencil from real life. These changes are not persistent; in other words, once the stylus button is released, the previously held tool will be selected again.","title":"Stylus Buttons"},{"location":"guide/config/#touchscreen","text":"TODO","title":"Touchscreen"},{"location":"guide/config/#view","text":"TODO","title":"View"},{"location":"guide/config/#zoom","text":"TODO","title":"Zoom"},{"location":"guide/config/#drawing-area","text":"TODO","title":"Drawing Area"},{"location":"guide/config/#defaults","text":"TODO","title":"Defaults"},{"location":"guide/config/#audio-recording","text":"TODO","title":"Audio Recording"},{"location":"guide/config/#latex","text":"TODO","title":"LaTeX"},{"location":"guide/config/#language","text":"TODO","title":"Language"},{"location":"guide/file-locations/","text":"Where to find Xournal++ files \u00b6 When you download and install Xournal++ you may wonder where all the files get stored. Note that you can store your own Xournal++ documents ( .xopp -files) wherever you like (up to file permissions). Typically you would store them somewhere in your user folder. Autosave files get stored at the same location, just with a .xopp~ -ending, once the xopp-file has been stored. So abc.xopp will be autosaved under abc.xopp~ . This section explains where files get stored automatically either during installation or while using Xournal++. The following table provides an overwiew, detailing typical file locations: Linux (.deb installer) MacOS (.app-bundle) MS Windows (.exe installer) Binary folder /usr/share/bin Xournal++.app/MacOS C:\\Programs\\Xournal++\\bin Shared resources folder /usr/share/xournalpp Xournal++.app/Resources C:\\Programs\\Xournal++\\share\\xournalpp Localizations folder /usr/share/locale Xournal++.app/Resources/share/locale C:\\Programs\\Xournal++\\share\\locale Config folder /home/<user>/.config/xournalpp /Users/<user>/.config/xournalpp C:\\Users\\<user>\\AppData\\Local\\xournalpp Cache folder /home/<user>/.cache/xournalpp /Users/<user>/.cache/xournalpp C:\\Documents and Settings\\<user>\\Local Settings\\Temporary Internet Files Temporary folder /tmp /tmp C:\\Users\\<user>\\AppData\\Local\\Temp In accordance with the XDG Base Directory Specification the Config Folder and Cache Folder can be defined by the environment variables $XDG_CONFIG_HOME and $XDG_CACHE_HOME , respectively. The Temporary folder can be defined by $TMPDIR on Linux/MacOS or $TEMP$ on MS Windows. Below the contents of all the tabulated folders are explained. Some platform specific files not tabulated here are summarized at the end of this section. Binary folder \u00b6 The binary folder contains the executables for running Xournal++. On Linux and MacOS a thumbnailer is included for generating thumbnails in the file manager. Shared resources folder \u00b6 The resources folder contains: the LaTeX templates (under Linux and Windows in the resources subfolder) plugins subfolder, containing all Lua plugins ui subfolder, containing all .glade files, defining the user interface, all Xournal++ icons, including the application icon and all toolbar icons the toolbar configuration file toolbar.ini the pagetemplates configuration file pagetemplates.ini the css-style file xournalpp.css Localizations folder \u00b6 The localizations folder contains the translations of Xournal++ in all supported languages. These are stored in files named xournalpp.mo Config folder \u00b6 The config folder contains configuration files like the settings.xml file, which stores Xournal++ settings autosave subfolder for documents that have not been stored previously metadata subfolder, which contains metadata of previously opened files the colornames.ini file, which allows to configure colors Cache folder \u00b6 The cache folder contains the errorlogs subfolder, which stores crash logs. Temporary folder \u00b6 Temporary files generated by the LaTeX tool get stored in the temporary folder. Platform specific files \u00b6 Some files installed by Xournal++ are platform-specific and are not contained on all platforms. On Linux : there are a desktop file, a copyright file, a changelog, man pages, metainfo and mime type files. The full list of files and file paths of a Xournal++ installation can be obtained in the terminal via dpkg -L xournalpp On MacOS : there are an Info.plist , a pkginfo and a xournalpp.icns icon for the .app -bundle, Adwaita and hicolor icons themes, diverse libraries ( .dylib 's) and folders related to gtk/gdk and glib On MS Windows : there is an uninstaller Uninstall.exe , diverse libraires ( .dll 's), Adwaita and hicolor icons themes and folders related to gtk/gdk and glib","title":"File locations"},{"location":"guide/file-locations/#where-to-find-xournal-files","text":"When you download and install Xournal++ you may wonder where all the files get stored. Note that you can store your own Xournal++ documents ( .xopp -files) wherever you like (up to file permissions). Typically you would store them somewhere in your user folder. Autosave files get stored at the same location, just with a .xopp~ -ending, once the xopp-file has been stored. So abc.xopp will be autosaved under abc.xopp~ . This section explains where files get stored automatically either during installation or while using Xournal++. The following table provides an overwiew, detailing typical file locations: Linux (.deb installer) MacOS (.app-bundle) MS Windows (.exe installer) Binary folder /usr/share/bin Xournal++.app/MacOS C:\\Programs\\Xournal++\\bin Shared resources folder /usr/share/xournalpp Xournal++.app/Resources C:\\Programs\\Xournal++\\share\\xournalpp Localizations folder /usr/share/locale Xournal++.app/Resources/share/locale C:\\Programs\\Xournal++\\share\\locale Config folder /home/<user>/.config/xournalpp /Users/<user>/.config/xournalpp C:\\Users\\<user>\\AppData\\Local\\xournalpp Cache folder /home/<user>/.cache/xournalpp /Users/<user>/.cache/xournalpp C:\\Documents and Settings\\<user>\\Local Settings\\Temporary Internet Files Temporary folder /tmp /tmp C:\\Users\\<user>\\AppData\\Local\\Temp In accordance with the XDG Base Directory Specification the Config Folder and Cache Folder can be defined by the environment variables $XDG_CONFIG_HOME and $XDG_CACHE_HOME , respectively. The Temporary folder can be defined by $TMPDIR on Linux/MacOS or $TEMP$ on MS Windows. Below the contents of all the tabulated folders are explained. Some platform specific files not tabulated here are summarized at the end of this section.","title":"Where to find Xournal++ files"},{"location":"guide/file-locations/#binary-folder","text":"The binary folder contains the executables for running Xournal++. On Linux and MacOS a thumbnailer is included for generating thumbnails in the file manager.","title":"Binary folder"},{"location":"guide/file-locations/#shared-resources-folder","text":"The resources folder contains: the LaTeX templates (under Linux and Windows in the resources subfolder) plugins subfolder, containing all Lua plugins ui subfolder, containing all .glade files, defining the user interface, all Xournal++ icons, including the application icon and all toolbar icons the toolbar configuration file toolbar.ini the pagetemplates configuration file pagetemplates.ini the css-style file xournalpp.css","title":"Shared resources folder"},{"location":"guide/file-locations/#localizations-folder","text":"The localizations folder contains the translations of Xournal++ in all supported languages. These are stored in files named xournalpp.mo","title":"Localizations folder"},{"location":"guide/file-locations/#config-folder","text":"The config folder contains configuration files like the settings.xml file, which stores Xournal++ settings autosave subfolder for documents that have not been stored previously metadata subfolder, which contains metadata of previously opened files the colornames.ini file, which allows to configure colors","title":"Config folder"},{"location":"guide/file-locations/#cache-folder","text":"The cache folder contains the errorlogs subfolder, which stores crash logs.","title":"Cache folder"},{"location":"guide/file-locations/#temporary-folder","text":"Temporary files generated by the LaTeX tool get stored in the temporary folder.","title":"Temporary folder"},{"location":"guide/file-locations/#platform-specific-files","text":"Some files installed by Xournal++ are platform-specific and are not contained on all platforms. On Linux : there are a desktop file, a copyright file, a changelog, man pages, metainfo and mime type files. The full list of files and file paths of a Xournal++ installation can be obtained in the terminal via dpkg -L xournalpp On MacOS : there are an Info.plist , a pkginfo and a xournalpp.icns icon for the .app -bundle, Adwaita and hicolor icons themes, diverse libraries ( .dylib 's) and folders related to gtk/gdk and glib On MS Windows : there is an uninstaller Uninstall.exe , diverse libraires ( .dll 's), Adwaita and hicolor icons themes and folders related to gtk/gdk and glib","title":"Platform specific files"},{"location":"guide/overview/","text":"User Guide \u00b6 TODO","title":"Overview"},{"location":"guide/overview/#user-guide","text":"TODO","title":"User Guide"},{"location":"guide/tips/","text":"Tips \u00b6 TODO","title":"Tips"},{"location":"guide/tips/#tips","text":"TODO","title":"Tips"},{"location":"guide/plugins/notable/","text":"Notable Plugins \u00b6 The QuickSnapshot Plugin uses an external screenshot tool, to quickly take a screen snapshot of a region of the screen and save it into a user specified file The ToggleGrid Plugin provides a shortcut for toggling between \"grid background with snapping to grid\" and \"plain background without snapping to grid\" The ColorCycle Plugin lets you cycle through a list of colors for the current tool by using the same accelerator repeatedly The LayerActions Plugin provides shortcuts for cloning non-background layers to the next page, hiding all non-background layers except the footer layers and adding a new top layer on each page. The MigrateFontSizes Plugin allows to scale font sizes across the document, both via the GUI and directly from the menu. The HandwritingRecognition Plugin ( work in progress ) uses cloud-based handwriting recogntion to recognize handwritten text from a selection or page layer in a user-specified language. If you build an interesting plugin that you would like to share, feel free to submit your PR!","title":"Notable plugins"},{"location":"guide/plugins/notable/#notable-plugins","text":"The QuickSnapshot Plugin uses an external screenshot tool, to quickly take a screen snapshot of a region of the screen and save it into a user specified file The ToggleGrid Plugin provides a shortcut for toggling between \"grid background with snapping to grid\" and \"plain background without snapping to grid\" The ColorCycle Plugin lets you cycle through a list of colors for the current tool by using the same accelerator repeatedly The LayerActions Plugin provides shortcuts for cloning non-background layers to the next page, hiding all non-background layers except the footer layers and adding a new top layer on each page. The MigrateFontSizes Plugin allows to scale font sizes across the document, both via the GUI and directly from the menu. The HandwritingRecognition Plugin ( work in progress ) uses cloud-based handwriting recogntion to recognize handwritten text from a selection or page layer in a user-specified language. If you build an interesting plugin that you would like to share, feel free to submit your PR!","title":"Notable Plugins"},{"location":"guide/plugins/plugins/","text":"Building Plugins \u00b6 Xournal++ provides a basic Lua Plugin interface. Plugins can be added without building Xournal++ from source. Their primary use is to add user-specific functionality, shortcuts, make calls to external programs, define user-specific export functions and the like. In general the Lua Plugin interface is still in an early stage and will be expanded over time. In order to use Lua Plugins make sure you have Lua (version >=5.3) installed on your device. Plugin manager \u00b6 Plugins must be activated or deactivated in the Plugin manager (from the menubar). The Plugin manager lists the installation folder, description, author and version for each plugin. Only activated plugins will be listed in the menubar and only those can be run. The other plugins are safely excluded. Note that a restart of Xournal++ is required to change the activation of a plugin. Installation folder \u00b6 Currently all plugins reside in the same folder. By default this folder is /usr/share/xournalpp/plugins/ under Linux. C:\\Program Files\\Xournal++\\share\\xournalpp\\plugins\\ under MS Windows. Contents/Resources/plugins inside the Xournal++.app bundle under MacOS. Each plugin has its files stored in a subfolder of the plugin folder and contains at least a plugin.ini file and a Lua code file. Custom plugin folder(s) are planned to be added, see this pull request , but not yet there. Plugin structure \u00b6 The plugin.ini file contains the name of the author, the version number, info on whether it is enabled by default or not and a reference to the main Lua code file. A sample file (referencing main.lua ) is: plugin.ini \u00b6 [about] ## Author / Copyright notice author = NAME OF THE AUTHOR description = DESCRIPTION OF THE PLUGIN ## If the plugin is packed with Xournal++, use ## <xournalpp> then it gets the same version number version = <xournalpp> [default] enabled = false [plugin] mainfile = main.lua The Lua code file referenced in the plugin.ini file must define an initUi -function that registers toolbar actions and initializes all UI stuff. It is supposed to call the app.registerUi -function, whose argument is a Lua table containing the menu name displayed in Xournal++'s menubar, the callback function used when the plugin is called from the menu or via a keyboard accelerator, the accelerator used to execute the plugin callback function. The format looks like <Control>a or <Shift><Alt>F1 or <Release>z (for key release). See GTK3 reference for details and note that release key accelerators currently do not work, see this issue . The accelerator can be omitted. Using accelerators without modifiers like ( <Alt> , <Control> , <Shift> ) is allowed, but will likely break the text tool. You can register multiple menu entires/accelators in the same plugin by using app.registerUi multiple times. A sample file for the main Lua code file is: main.lua \u00b6 -- Register all Toolbar actions and intialize all UI stuff function initUi () app . registerUi ({[ \"menu\" ] = \"NAME\" , [ \"callback\" ] = \"run\" , [ \"accelerator\" ] = \"<Alt>F1\" }); -- ADD MORE CODE, IF NEEDED end -- Callback if the menu item is executed function run () -- ADD CODE LIKE -- app.uiAction({[\"action\"]=\"ACTION_TOOL_PEN\"}) -- TO SWITCH TO THE PEN TOOL, OR -- app.changeToolColor({[\"color\"] = 0xff0000, [\"selection\"] = true}) -- TO CHANGE THE COLOR OF THE CURRENT TOOL TO RED end Plugin API \u00b6 The Lua Plugin can execute a number of Xournal++ functions to interact with Xournal++. Those are defined in the Plugin API . Currently the list contains the following functions: app.msgbox for displaying messages to the user and letting the user choose an option by clicking a button app.saveAs for retrieving the filename from a native saveAs dialog. app.registerUi used in the initUi -function app.uiAction for simulating a toolbar/menubar click starting some action, app.uiActionSelected for notifying action listeners about selected options, app.changeCurrentPageBackground for changing the background of the current page, app.sidebarAction for actions accessible in the sidebar app.layerAction for actions accessible in the layer controller app.changeToolColor for changing the color of any tool with color capabilities, app.changePdfBackgroundPageNr to change the pdf background page number app.getDocumentStructure to get lots of useful info on the document, also used for applying operations on all/selected pages app.scrollToPage scrolls relatively or absolutely to a page app.scrollToPos scrolls relatively or absolutely to a new position on the same page app.setCurrentPage sets the given page as new current page app.setPageSize sets the width and height of the current page app.setCurrentLayer sets the given layer as the new current layer, and updates visibility if specified app.setLayerVisibility sets the visibility of the current layer All those functions are documented in the same file luapi_application.h , including example usage. Future progress on the Plugin API will be reported here. Help is always welcome. Using plugins to define shortcuts for ui actions \u00b6 Currently Xournal++ does not have shortcuts/keybindings configurable in the preferences. However you can write your custom plugin to achieve exactly that. The function app.uiAction used for simulating a toolbar/menubar click can be used for lots of different actions. This command accepts a Lua table with keys \"action\" , \"group\" and \"enabled\" as its argument. The \"group\" key is only used for displaying warnings, so you can omit it. The \"enabled\" key is set to true by default, so you can often omit it as well. The \"action\" key accepts one of the action strings listed in the Control::actionPerformed method in the source code. Note that the list of actions will change when new functionality is added to Xournal++. For example use: app . uiAction ({[ \"action\" ] = \"ACTION_RULER\" }) to activate the ruler (for drawing line segments) or app . uiAction ({[ \"action\" ] = \"ACTION_TOOL_FILL\" , [ \"enabled\" ] = false }) to turn off filling of shapes. Retrieving information about the document and iterating through pages and layers \u00b6 The app.getDocumentStructure function yields a Lua table of the following shape: { \"pages\" = { { \"pageWidth\" = number , \"pageHeight\" = number , \"isAnnoated\" = bool , \"pageTypeFormat\" = string , \"pdfBackgroundPageNo\" = integer ( 0 , if there is no pdf background page ), \"layers\" = { [ 0 ] = { \"isVisible\" = bool }, [ 1 ] = { \"isVisible\" = bool , \"isAnnotated\" = bool }, ... }, \"currentLayer\" = integer }, ... } \"currentPage\" = integer , \"pdfBackgroundFilename\" = string ( empty if there is none ) } So for example to get the number of all pages, the page number of the current page and the layer ID of the current layer use the code: local docStructure = app . getDocumentStructure local numPages = # docStructure [ \"pages\" ] local currPage = docStructure [ \"currentPage\" ] local currLayer = docStructure [ \"pages\" ][ currPage ][ \"currentLayer\" ] You can iterate through all pages by using the lines local docStructure = app . getDocumentStructure local numPages = # docStructure [ \"pages\" ] for i = 1 , numPages do -- ADD CODE TO EXECUTE FOR PAGE i end Similarly you can run through all layers of a page. In case of the current page this would read like local docStructure = app . getDocumentStructure local page = docStructure [ \"currentPage\" ] local numLayers = # docStructure [ \"pages\" ][ page ][ \"layers\" ] for i = 1 , numLayers do -- ADD CODE TO EXECUTE FOR LAYER i end Using Lua modules \u00b6 More complex Plugins will require Lua modules for certain operations. For instance if your Plugin needs a more sophisticated GUI, you may want to use the lgi -module via require(\"lgi\") . The Lua package path by default contains the root folder of the plugin and the system Lua package path. In case you need other folders in the package path, use the package.path key to add them.","title":"Building plugins"},{"location":"guide/plugins/plugins/#building-plugins","text":"Xournal++ provides a basic Lua Plugin interface. Plugins can be added without building Xournal++ from source. Their primary use is to add user-specific functionality, shortcuts, make calls to external programs, define user-specific export functions and the like. In general the Lua Plugin interface is still in an early stage and will be expanded over time. In order to use Lua Plugins make sure you have Lua (version >=5.3) installed on your device.","title":"Building Plugins"},{"location":"guide/plugins/plugins/#plugin-manager","text":"Plugins must be activated or deactivated in the Plugin manager (from the menubar). The Plugin manager lists the installation folder, description, author and version for each plugin. Only activated plugins will be listed in the menubar and only those can be run. The other plugins are safely excluded. Note that a restart of Xournal++ is required to change the activation of a plugin.","title":"Plugin manager"},{"location":"guide/plugins/plugins/#installation-folder","text":"Currently all plugins reside in the same folder. By default this folder is /usr/share/xournalpp/plugins/ under Linux. C:\\Program Files\\Xournal++\\share\\xournalpp\\plugins\\ under MS Windows. Contents/Resources/plugins inside the Xournal++.app bundle under MacOS. Each plugin has its files stored in a subfolder of the plugin folder and contains at least a plugin.ini file and a Lua code file. Custom plugin folder(s) are planned to be added, see this pull request , but not yet there.","title":"Installation folder"},{"location":"guide/plugins/plugins/#plugin-structure","text":"The plugin.ini file contains the name of the author, the version number, info on whether it is enabled by default or not and a reference to the main Lua code file. A sample file (referencing main.lua ) is:","title":"Plugin structure"},{"location":"guide/plugins/plugins/#pluginini","text":"[about] ## Author / Copyright notice author = NAME OF THE AUTHOR description = DESCRIPTION OF THE PLUGIN ## If the plugin is packed with Xournal++, use ## <xournalpp> then it gets the same version number version = <xournalpp> [default] enabled = false [plugin] mainfile = main.lua The Lua code file referenced in the plugin.ini file must define an initUi -function that registers toolbar actions and initializes all UI stuff. It is supposed to call the app.registerUi -function, whose argument is a Lua table containing the menu name displayed in Xournal++'s menubar, the callback function used when the plugin is called from the menu or via a keyboard accelerator, the accelerator used to execute the plugin callback function. The format looks like <Control>a or <Shift><Alt>F1 or <Release>z (for key release). See GTK3 reference for details and note that release key accelerators currently do not work, see this issue . The accelerator can be omitted. Using accelerators without modifiers like ( <Alt> , <Control> , <Shift> ) is allowed, but will likely break the text tool. You can register multiple menu entires/accelators in the same plugin by using app.registerUi multiple times. A sample file for the main Lua code file is:","title":"plugin.ini"},{"location":"guide/plugins/plugins/#mainlua","text":"-- Register all Toolbar actions and intialize all UI stuff function initUi () app . registerUi ({[ \"menu\" ] = \"NAME\" , [ \"callback\" ] = \"run\" , [ \"accelerator\" ] = \"<Alt>F1\" }); -- ADD MORE CODE, IF NEEDED end -- Callback if the menu item is executed function run () -- ADD CODE LIKE -- app.uiAction({[\"action\"]=\"ACTION_TOOL_PEN\"}) -- TO SWITCH TO THE PEN TOOL, OR -- app.changeToolColor({[\"color\"] = 0xff0000, [\"selection\"] = true}) -- TO CHANGE THE COLOR OF THE CURRENT TOOL TO RED end","title":"main.lua"},{"location":"guide/plugins/plugins/#plugin-api","text":"The Lua Plugin can execute a number of Xournal++ functions to interact with Xournal++. Those are defined in the Plugin API . Currently the list contains the following functions: app.msgbox for displaying messages to the user and letting the user choose an option by clicking a button app.saveAs for retrieving the filename from a native saveAs dialog. app.registerUi used in the initUi -function app.uiAction for simulating a toolbar/menubar click starting some action, app.uiActionSelected for notifying action listeners about selected options, app.changeCurrentPageBackground for changing the background of the current page, app.sidebarAction for actions accessible in the sidebar app.layerAction for actions accessible in the layer controller app.changeToolColor for changing the color of any tool with color capabilities, app.changePdfBackgroundPageNr to change the pdf background page number app.getDocumentStructure to get lots of useful info on the document, also used for applying operations on all/selected pages app.scrollToPage scrolls relatively or absolutely to a page app.scrollToPos scrolls relatively or absolutely to a new position on the same page app.setCurrentPage sets the given page as new current page app.setPageSize sets the width and height of the current page app.setCurrentLayer sets the given layer as the new current layer, and updates visibility if specified app.setLayerVisibility sets the visibility of the current layer All those functions are documented in the same file luapi_application.h , including example usage. Future progress on the Plugin API will be reported here. Help is always welcome.","title":"Plugin API"},{"location":"guide/plugins/plugins/#using-plugins-to-define-shortcuts-for-ui-actions","text":"Currently Xournal++ does not have shortcuts/keybindings configurable in the preferences. However you can write your custom plugin to achieve exactly that. The function app.uiAction used for simulating a toolbar/menubar click can be used for lots of different actions. This command accepts a Lua table with keys \"action\" , \"group\" and \"enabled\" as its argument. The \"group\" key is only used for displaying warnings, so you can omit it. The \"enabled\" key is set to true by default, so you can often omit it as well. The \"action\" key accepts one of the action strings listed in the Control::actionPerformed method in the source code. Note that the list of actions will change when new functionality is added to Xournal++. For example use: app . uiAction ({[ \"action\" ] = \"ACTION_RULER\" }) to activate the ruler (for drawing line segments) or app . uiAction ({[ \"action\" ] = \"ACTION_TOOL_FILL\" , [ \"enabled\" ] = false }) to turn off filling of shapes.","title":"Using plugins to define shortcuts for ui actions"},{"location":"guide/plugins/plugins/#retrieving-information-about-the-document-and-iterating-through-pages-and-layers","text":"The app.getDocumentStructure function yields a Lua table of the following shape: { \"pages\" = { { \"pageWidth\" = number , \"pageHeight\" = number , \"isAnnoated\" = bool , \"pageTypeFormat\" = string , \"pdfBackgroundPageNo\" = integer ( 0 , if there is no pdf background page ), \"layers\" = { [ 0 ] = { \"isVisible\" = bool }, [ 1 ] = { \"isVisible\" = bool , \"isAnnotated\" = bool }, ... }, \"currentLayer\" = integer }, ... } \"currentPage\" = integer , \"pdfBackgroundFilename\" = string ( empty if there is none ) } So for example to get the number of all pages, the page number of the current page and the layer ID of the current layer use the code: local docStructure = app . getDocumentStructure local numPages = # docStructure [ \"pages\" ] local currPage = docStructure [ \"currentPage\" ] local currLayer = docStructure [ \"pages\" ][ currPage ][ \"currentLayer\" ] You can iterate through all pages by using the lines local docStructure = app . getDocumentStructure local numPages = # docStructure [ \"pages\" ] for i = 1 , numPages do -- ADD CODE TO EXECUTE FOR PAGE i end Similarly you can run through all layers of a page. In case of the current page this would read like local docStructure = app . getDocumentStructure local page = docStructure [ \"currentPage\" ] local numLayers = # docStructure [ \"pages\" ][ page ][ \"layers\" ] for i = 1 , numLayers do -- ADD CODE TO EXECUTE FOR LAYER i end","title":"Retrieving information about the document and iterating through pages and layers"},{"location":"guide/plugins/plugins/#using-lua-modules","text":"More complex Plugins will require Lua modules for certain operations. For instance if your Plugin needs a more sophisticated GUI, you may want to use the lgi -module via require(\"lgi\") . The Lua package path by default contains the root folder of the plugin and the system Lua package path. In case you need other folders in the package path, use the package.path key to add them.","title":"Using Lua modules"},{"location":"guide/tools/eraser/","text":"Eraser tool \u00b6 The eraser tool can remove strokes or parts of strokes. It has three modes: Standard : remove parts of strokes that the cursor moves over. Whiteout : paint a white stroke on top of what you want to hide. This is useful if you want to erase something from the background. Delete Stroke : remove the entirety of any stroke that the cursor touches.","title":"Eraser tool"},{"location":"guide/tools/eraser/#eraser-tool","text":"The eraser tool can remove strokes or parts of strokes. It has three modes: Standard : remove parts of strokes that the cursor moves over. Whiteout : paint a white stroke on top of what you want to hide. This is useful if you want to erase something from the background. Delete Stroke : remove the entirety of any stroke that the cursor touches.","title":"Eraser tool"},{"location":"guide/tools/latex/","text":"LaTeX tool \u00b6 Using the LaTeX tool you can insert LaTeX formulas into a Xournal++ document. In order to use this tool you must have LaTeX installed on your system. The feature needs to be able to call pdflatex. In addition, the LaTeX standalone package needs to be installed, which typically requires installation of texlive-latex-extra or texlive-standalone . On Ubuntu or similar Linux systems this means sudo apt-get install texlive-latex-extra For other operating systems you will need to consult your LaTeX installation manual on how to add the standalone LaTeX package. Basic LaTeX formulas \u00b6 Clicking on the LaTeX button in the toolbar will bring up a dialog which will allow you to type in a formula. A preview will be displayed in the center of the dialog, which will keep updating as you type and indicate whether your formula is valid. Once you are done, you can click the OK button to insert the LaTeX into the document; the rendered formula will appear at the center of the current page. The formula can be selected, moved scaled and edited as desired. Note that the LaTeX formula will always be set in inline math mode . If you want to exit math mode, you should write a $-sign to leave math mode and add another $-sign at the end to reenter math-mode. For instance the LaTeX formula $ \\huge $ x ^ 2 will use the command \\huge to increase the font size, which cannot be done in math mode. Enhanced LaTeX tool in Xournal++ 1.1.0+dev \u00b6 The LaTeX tool has recently been extended making it much more configurable. Most importantly a customizable template has been implemented, where you can load packages and define macros. Moreover a LaTeX settings panel has been added, where you choose the template, specify the LaTeX generation command and test your LaTeX configuration. The extension is only available in version 1.1.0+dev. Customization of the template \u00b6 A default LaTeX template is provided under the name default_template.tex . By default it is pre-selected in the LaTeX settings panel. Clicking on it, you will find its location in your file system. On Linux systems it will typically be stored in /usr/share/xournalpp/resources . To generate a custom LaTeX template, make a copy of the default template, save it under a different name and start customizing it by adding packages and macros. Some suggestions are listed here: Include the graphicx package by adding \\usepackage{graphicx} to your template file. As an example this will give you the possibility to add rotated text via a LaTeX formula like \\text { \\rotatebox [origin=c] { 90 }{ My Rotated Text }} Include the TikZ package via \\usepackage{tikz} for creating drawings with the powerful TikZ tool. A simple example would be to draw a table (or grid) with n rows and m columns via \\tikz{\\draw (0,0) grid(m,n)} . See this issue for more information. Include the PGFPlots package via \\usepackage{pgfplots} for plotting function graphs. Using a macro you will be able to plot function graphs nicely and very quickly. For example, add the following lines to your template: %for defining commands \\usepackage { xargs } % for drawing and plotting \\usepackage { pgfplots } \\pgfplotsset { compat=newest } % Allows to place the legend below plot \\newcommandx { \\graph } [3][1=,2=] { \\begin { tikzpicture } \\begin { axis } [xlabel= $ x $ ,ylabel= $ y $ , axis lines=center,samples=100, #2] \\addplot [#1] { #3 } ; \\end { axis } \\end { tikzpicture } } Then a LaTeX-formula like \\graph{x^2} will plot the normal parabola and \\graph[domain=-2:2, blue][x=1cm,y=1cm]{x^2} will further restrict the domain, set the color and define units. Include the Listings package via \\usepackage{listings} for proper alignment and syntax coloring of code snippets. You need to define the style with lstset as in the following example, which you can add to your template: \\usepackage { listings } \\lstset { language=C++, basicstyle= \\ttfamily , keywordstyle= \\color { blue } \\ttfamily , stringstyle= \\color { red } \\ttfamily , commentstyle= \\color { green } \\ttfamily , morecomment=[l][ \\color { magenta } ] { \\# } } In the LaTeX formula you can then use the lstlistings enivronment as in the following example $ \\begin {lstlisting} #include<stdio.h> #include<iostream> // A comment int main ( void ) { printf ( \"Hello World \\n \" ) ; return 0 ; } \\end {lstlisting} $ Note that the starting and trailing $-signs are needed to exit and reenter math mode.","title":"LaTeX tool"},{"location":"guide/tools/latex/#latex-tool","text":"Using the LaTeX tool you can insert LaTeX formulas into a Xournal++ document. In order to use this tool you must have LaTeX installed on your system. The feature needs to be able to call pdflatex. In addition, the LaTeX standalone package needs to be installed, which typically requires installation of texlive-latex-extra or texlive-standalone . On Ubuntu or similar Linux systems this means sudo apt-get install texlive-latex-extra For other operating systems you will need to consult your LaTeX installation manual on how to add the standalone LaTeX package.","title":"LaTeX tool"},{"location":"guide/tools/latex/#basic-latex-formulas","text":"Clicking on the LaTeX button in the toolbar will bring up a dialog which will allow you to type in a formula. A preview will be displayed in the center of the dialog, which will keep updating as you type and indicate whether your formula is valid. Once you are done, you can click the OK button to insert the LaTeX into the document; the rendered formula will appear at the center of the current page. The formula can be selected, moved scaled and edited as desired. Note that the LaTeX formula will always be set in inline math mode . If you want to exit math mode, you should write a $-sign to leave math mode and add another $-sign at the end to reenter math-mode. For instance the LaTeX formula $ \\huge $ x ^ 2 will use the command \\huge to increase the font size, which cannot be done in math mode.","title":"Basic LaTeX formulas"},{"location":"guide/tools/latex/#enhanced-latex-tool-in-xournal-110dev","text":"The LaTeX tool has recently been extended making it much more configurable. Most importantly a customizable template has been implemented, where you can load packages and define macros. Moreover a LaTeX settings panel has been added, where you choose the template, specify the LaTeX generation command and test your LaTeX configuration. The extension is only available in version 1.1.0+dev.","title":"Enhanced LaTeX tool in Xournal++ 1.1.0+dev"},{"location":"guide/tools/latex/#customization-of-the-template","text":"A default LaTeX template is provided under the name default_template.tex . By default it is pre-selected in the LaTeX settings panel. Clicking on it, you will find its location in your file system. On Linux systems it will typically be stored in /usr/share/xournalpp/resources . To generate a custom LaTeX template, make a copy of the default template, save it under a different name and start customizing it by adding packages and macros. Some suggestions are listed here: Include the graphicx package by adding \\usepackage{graphicx} to your template file. As an example this will give you the possibility to add rotated text via a LaTeX formula like \\text { \\rotatebox [origin=c] { 90 }{ My Rotated Text }} Include the TikZ package via \\usepackage{tikz} for creating drawings with the powerful TikZ tool. A simple example would be to draw a table (or grid) with n rows and m columns via \\tikz{\\draw (0,0) grid(m,n)} . See this issue for more information. Include the PGFPlots package via \\usepackage{pgfplots} for plotting function graphs. Using a macro you will be able to plot function graphs nicely and very quickly. For example, add the following lines to your template: %for defining commands \\usepackage { xargs } % for drawing and plotting \\usepackage { pgfplots } \\pgfplotsset { compat=newest } % Allows to place the legend below plot \\newcommandx { \\graph } [3][1=,2=] { \\begin { tikzpicture } \\begin { axis } [xlabel= $ x $ ,ylabel= $ y $ , axis lines=center,samples=100, #2] \\addplot [#1] { #3 } ; \\end { axis } \\end { tikzpicture } } Then a LaTeX-formula like \\graph{x^2} will plot the normal parabola and \\graph[domain=-2:2, blue][x=1cm,y=1cm]{x^2} will further restrict the domain, set the color and define units. Include the Listings package via \\usepackage{listings} for proper alignment and syntax coloring of code snippets. You need to define the style with lstset as in the following example, which you can add to your template: \\usepackage { listings } \\lstset { language=C++, basicstyle= \\ttfamily , keywordstyle= \\color { blue } \\ttfamily , stringstyle= \\color { red } \\ttfamily , commentstyle= \\color { green } \\ttfamily , morecomment=[l][ \\color { magenta } ] { \\# } } In the LaTeX formula you can then use the lstlistings enivronment as in the following example $ \\begin {lstlisting} #include<stdio.h> #include<iostream> // A comment int main ( void ) { printf ( \"Hello World \\n \" ) ; return 0 ; } \\end {lstlisting} $ Note that the starting and trailing $-signs are needed to exit and reenter math mode.","title":"Customization of the template"},{"location":"guide/tools/pen/","text":"Pen and Highlighter tools \u00b6 The pen and highlighter tools allow you to write , annotate the document and create various shapes using a mouse or a pressure-sensitive stylus. Both pen and highlighter can be used with various colors and thicknesses. In fill mode the enclosed area will automatically be filled. The pen and highlighter tool can also draw various shapes (squares and rectangles, ellipses and circles, arrows, line segments, coordinate systems and splines) instead of strokes. Some of these shapes (line segments, rectangles and circles) can also be automatically recognized using the stroke recognizer. To change the color of any selected stroke or any future strokes you draw, click on one of the color buttons. Besides the preset color buttons, you can also set a custom color by clicking on the Select color button. The fill mode can be toggled by selecting the paint bucket icon (in the default layout, it is to the left of the color buttons). To change the thickness , press one of the thickness buttons (in the default layout, they are to the left of the fill bucket button). In order to draw shapes instead of strokes or to turn on the stroke recognizer use the shapes toggle menu, which you find to the right of the LaTeX tool (Math TEX button) in the default layout. The shapes toggle menu will have a dropdown arrow on its right. The shape modes can be used as follows: Shapes defined by two points \u00b6 In order to draw a line segment or an arrow click at the location of the first point (tail) and drag the cursor to the location of the second end point (head). Ellipses/circles and rectangles/squares can be drawn in similar fashion. These shapes will be symmetrical with respect to the horizontal and vertical axis. The first point can be either the center of the shape or one of the corners (of the surrounding rectangle/square in case of an ellipsis/circle). The second point will always be one of the corners. Pressing the control key will make this shape been drawn from the center , pressing the shift key will make it a perfect circle/square . If you do not want to use the keyboard for these modifiers, you can activate the drawing direction modifiers in the preferences (drawing area panel). Draw UP from the start point if you want the start point to be the center of the shape. Draw LEFT from the start point if you want the shape to be a circle/square. The coordinate system is a simple L-shape. Modifiers can be applied like for ellipses/circles and rectangles/squares. Splines \u00b6 The Spline shape is only available in version 1.1.0+dev . With this shape you can draw polygon courses and smooth curves. Technically these curves are splines consisting of Bezier curve segments of degree at most 3. In order to draw a polygon course you simply click (and immediately release) on the locations where you want the vertices of your polygon course. For drawing a smooth curve you should always drag the mouse/stylus a little after clicking on the locations through which the curve shall pass. The curve will be tangent to the direction you drag out at the chosen points though which the curve passes. You can also combine linear spline segments with curved segments. The points where you click are called anchor points (or knots). They will be displayed with little red circles while editing the spline. The directions you drag out will be displayed as tangents in green color. Technically the two ends of the tangent are control points of the spline. You have several ways of correcting the last anchor point and the last tangent. Press the ARROW keys to move the last anchor point around. Use the keys r (respecitvely Shift + r ) to rotate the tangent (counter) clockwise. Use the keys s (respectively Shift + s ) to scale the last tangent up or down. You can also completely remove the last anchor point (and the corresponding tangent) via the BACKSPACE key. Drawing a spline is finished by either connecting the curve up to the first vertex/anchor point (yielding a closed spline), by double clicking or using the ESCAPE key. Stroke recognizer \u00b6 If the stroke recognizer is turned on, it will attempt to convert every stroke upon completion into either a line segment, a circle or a (possibly rotated) rectangle/square. It will leave the stroke as-is if it cannot match the stroke to one of these shapes.","title":"Pen and Highlighter tools"},{"location":"guide/tools/pen/#pen-and-highlighter-tools","text":"The pen and highlighter tools allow you to write , annotate the document and create various shapes using a mouse or a pressure-sensitive stylus. Both pen and highlighter can be used with various colors and thicknesses. In fill mode the enclosed area will automatically be filled. The pen and highlighter tool can also draw various shapes (squares and rectangles, ellipses and circles, arrows, line segments, coordinate systems and splines) instead of strokes. Some of these shapes (line segments, rectangles and circles) can also be automatically recognized using the stroke recognizer. To change the color of any selected stroke or any future strokes you draw, click on one of the color buttons. Besides the preset color buttons, you can also set a custom color by clicking on the Select color button. The fill mode can be toggled by selecting the paint bucket icon (in the default layout, it is to the left of the color buttons). To change the thickness , press one of the thickness buttons (in the default layout, they are to the left of the fill bucket button). In order to draw shapes instead of strokes or to turn on the stroke recognizer use the shapes toggle menu, which you find to the right of the LaTeX tool (Math TEX button) in the default layout. The shapes toggle menu will have a dropdown arrow on its right. The shape modes can be used as follows:","title":"Pen and Highlighter tools"},{"location":"guide/tools/pen/#shapes-defined-by-two-points","text":"In order to draw a line segment or an arrow click at the location of the first point (tail) and drag the cursor to the location of the second end point (head). Ellipses/circles and rectangles/squares can be drawn in similar fashion. These shapes will be symmetrical with respect to the horizontal and vertical axis. The first point can be either the center of the shape or one of the corners (of the surrounding rectangle/square in case of an ellipsis/circle). The second point will always be one of the corners. Pressing the control key will make this shape been drawn from the center , pressing the shift key will make it a perfect circle/square . If you do not want to use the keyboard for these modifiers, you can activate the drawing direction modifiers in the preferences (drawing area panel). Draw UP from the start point if you want the start point to be the center of the shape. Draw LEFT from the start point if you want the shape to be a circle/square. The coordinate system is a simple L-shape. Modifiers can be applied like for ellipses/circles and rectangles/squares.","title":"Shapes defined by two points"},{"location":"guide/tools/pen/#splines","text":"The Spline shape is only available in version 1.1.0+dev . With this shape you can draw polygon courses and smooth curves. Technically these curves are splines consisting of Bezier curve segments of degree at most 3. In order to draw a polygon course you simply click (and immediately release) on the locations where you want the vertices of your polygon course. For drawing a smooth curve you should always drag the mouse/stylus a little after clicking on the locations through which the curve shall pass. The curve will be tangent to the direction you drag out at the chosen points though which the curve passes. You can also combine linear spline segments with curved segments. The points where you click are called anchor points (or knots). They will be displayed with little red circles while editing the spline. The directions you drag out will be displayed as tangents in green color. Technically the two ends of the tangent are control points of the spline. You have several ways of correcting the last anchor point and the last tangent. Press the ARROW keys to move the last anchor point around. Use the keys r (respecitvely Shift + r ) to rotate the tangent (counter) clockwise. Use the keys s (respectively Shift + s ) to scale the last tangent up or down. You can also completely remove the last anchor point (and the corresponding tangent) via the BACKSPACE key. Drawing a spline is finished by either connecting the curve up to the first vertex/anchor point (yielding a closed spline), by double clicking or using the ESCAPE key.","title":"Splines"},{"location":"guide/tools/pen/#stroke-recognizer","text":"If the stroke recognizer is turned on, it will attempt to convert every stroke upon completion into either a line segment, a circle or a (possibly rotated) rectangle/square. It will leave the stroke as-is if it cannot match the stroke to one of these shapes.","title":"Stroke recognizer"},{"location":"guide/tools/selecsnap/","text":"Selection & Snapping tools \u00b6 Selection tools \u00b6 With the selection tools you can either select a single object or multiple objects of the page in order to interact with them. Specifically the following interactions and objects are supported: Strokes : can be copied, cut, erased, moved, resized, and rotated. Images, LaTeX and text : can be copied, cut, deleted, moved and resized. Pdf : currently not compatible with any selection tool. Object selection can be done with one of the following tools: Select Rectangle : creates a rectangular region from a corner while dragging and selecting all objects strictly within it. Select region : works like a pen, where your stroke creates a shadow around the region you enclose. Again, all objects must be completely covered with this shadow to be included in the selection. Select object : select only one object at a time. You just need to touch the object to select. When an object is clicked with the Select Region or Select Rectangle tool, the touched object is selected; that is, they work like the object selection tool. You can simplify the selection of single objects by enabling Tap action in the preferences (drawing area panel) and the \"Try to select object first\" checkbox. If activated you can select single objects simply by tapping (short clicking) on them regardless of the tool that is currently in use. Snapping tools \u00b6 The Snapping tools correct and adjust the displacement, size and rotation angle of selected objects. Drawing of shapes and (optionally) recognized shapes are also affected. Grid Snapping \u00b6 Grid Snapping makes the displacements of objects and lines made with the tools mentioned above fit with the grid of the page. This grid matches by default the Graph background grid, but it continues to exist internally even with other backgrounds. When you resize with Grid Snap enabled, the resize will attempt to match the grid line, no matter which side of the object. Similarly if you displace a selection by dragging it, it will attempt to match a grid point. Hold the selection near the corner that needs to be matched. Technically Xournal++ computes a minimal rectangle that contains all the objects of the selection. This rectangle is a bit smaller than the one you get display for manipulating the selection. The corner of this smaller rectangle which is closest to the cursor position will get matched. Rotation Snapping \u00b6 Rotation Snapping allows rotations of selected objects and strokes made with the tools mentioned above to be snapped to predetermined angles. These default angles correspond to multiples of 15 degrees. This allows you e.g. to easily rotate some strokes or shapes around 45 degrees, 60 degrees or 90 degrees. Configuration \u00b6 Both tools have a tolerance that can be configured in the preferences (Drawing Area panel, section Snapping). Higher values correspond to greater intensity in the effect. On the extrema, tolerance 1.0 means that all objects will get snapped; tolerance 0.0 means that no objects will get snapped. The Snapping effect is disabled by default for shape recognition, but it can be activated in the same section. Note that in the Grid Snapping description it is mentioned that the grid matches by default the grid of the Graph background. This grid consists of squares with side length 0.5 cm. By means of the Grid size parameter it is possible to change the side length of the grid squares as a multiple of the original length. In this way, for example, by setting 0.5 in the parameter, the internal grid becomes squares half the size of the Graph paper grid background, so the objects will try to fit not only the lines of the squares, but also with its halves.","title":"Selection and Snapping tools"},{"location":"guide/tools/selecsnap/#selection-snapping-tools","text":"","title":"Selection &amp; Snapping tools"},{"location":"guide/tools/selecsnap/#selection-tools","text":"With the selection tools you can either select a single object or multiple objects of the page in order to interact with them. Specifically the following interactions and objects are supported: Strokes : can be copied, cut, erased, moved, resized, and rotated. Images, LaTeX and text : can be copied, cut, deleted, moved and resized. Pdf : currently not compatible with any selection tool. Object selection can be done with one of the following tools: Select Rectangle : creates a rectangular region from a corner while dragging and selecting all objects strictly within it. Select region : works like a pen, where your stroke creates a shadow around the region you enclose. Again, all objects must be completely covered with this shadow to be included in the selection. Select object : select only one object at a time. You just need to touch the object to select. When an object is clicked with the Select Region or Select Rectangle tool, the touched object is selected; that is, they work like the object selection tool. You can simplify the selection of single objects by enabling Tap action in the preferences (drawing area panel) and the \"Try to select object first\" checkbox. If activated you can select single objects simply by tapping (short clicking) on them regardless of the tool that is currently in use.","title":"Selection tools"},{"location":"guide/tools/selecsnap/#snapping-tools","text":"The Snapping tools correct and adjust the displacement, size and rotation angle of selected objects. Drawing of shapes and (optionally) recognized shapes are also affected.","title":"Snapping tools"},{"location":"guide/tools/selecsnap/#grid-snapping","text":"Grid Snapping makes the displacements of objects and lines made with the tools mentioned above fit with the grid of the page. This grid matches by default the Graph background grid, but it continues to exist internally even with other backgrounds. When you resize with Grid Snap enabled, the resize will attempt to match the grid line, no matter which side of the object. Similarly if you displace a selection by dragging it, it will attempt to match a grid point. Hold the selection near the corner that needs to be matched. Technically Xournal++ computes a minimal rectangle that contains all the objects of the selection. This rectangle is a bit smaller than the one you get display for manipulating the selection. The corner of this smaller rectangle which is closest to the cursor position will get matched.","title":"Grid Snapping"},{"location":"guide/tools/selecsnap/#rotation-snapping","text":"Rotation Snapping allows rotations of selected objects and strokes made with the tools mentioned above to be snapped to predetermined angles. These default angles correspond to multiples of 15 degrees. This allows you e.g. to easily rotate some strokes or shapes around 45 degrees, 60 degrees or 90 degrees.","title":"Rotation Snapping"},{"location":"guide/tools/selecsnap/#configuration","text":"Both tools have a tolerance that can be configured in the preferences (Drawing Area panel, section Snapping). Higher values correspond to greater intensity in the effect. On the extrema, tolerance 1.0 means that all objects will get snapped; tolerance 0.0 means that no objects will get snapped. The Snapping effect is disabled by default for shape recognition, but it can be activated in the same section. Note that in the Grid Snapping description it is mentioned that the grid matches by default the grid of the Graph background. This grid consists of squares with side length 0.5 cm. By means of the Grid size parameter it is possible to change the side length of the grid squares as a multiple of the original length. In this way, for example, by setting 0.5 in the parameter, the internal grid becomes squares half the size of the Graph paper grid background, so the objects will try to fit not only the lines of the squares, but also with its halves.","title":"Configuration"},{"location":"installation/","text":"","title":"OS selection"},{"location":"installation/linux/","text":"Ubuntu and derivatives Install the latest stable release from the following unofficial PPA sudo add-apt-repository ppa:apandada1/xournalpp-stable sudo apt update sudo apt install xournalpp Install the latest unstable nightly release from the following unofficial PPA sudo add-apt-repository ppa:andreasbutti/xournalpp-master sudo apt update sudo apt install xournalpp Both of these can be easily upgraded via sudo apt update && sudo apt upgrade Fedora Install the latest stable release via dnf install xournalpp Solus Install the latest stable release via sudo eopkg it xournalpp openSUSE Install the latest stable release via zypper in xournalpp NixOS / Nix Install the latest stable release via nix-env -iA nixpkgs.xournalpp Arch Install the latest stable release via pacman -S xournalpp There is also a development package xournalpp-git available at https://aur.archlinux.org/packages/xournalpp-git/","title":"Linux"},{"location":"installation/macos/","text":"Unzip the downloaded archive file Run the installation program within Success!","title":"MacOS"},{"location":"installation/windows/","text":"Unzip archive which should be named something like xournalpp-{version}-windows.zip Run the setup program contained in xournalpp-{version}-windows.zip Follow the installation steps Success!","title":"Windows"}]}